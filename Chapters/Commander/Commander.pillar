!!Commander: a Powerful and Simple Command Framework

Commander is a library originally developed by Denis Kudriashov. Commander 2.0 is the second iteration of such library. Commander 2 has been designed by J. Delplanque and S. Ducasse. Note that Commander20 is not compatible with Commander but this is really easy to migrate from Commander to Commander 20. This document describes Commander 20 in the context of Spec20, the user interface building framework.

%+>figures/rmod.png|width=30+

!!! Commands

Commander models application actions as first class objects following the Command design pattern. Every action is implemented as a separate command class (subclass of ==CmCommand==) with an ==execute== method and all state required for execution.

With Commander you can express commands and use them to generate menus, toolbar but also to script an application from the command line.


Let's start with a sample application: a Contact book

!!! A contact book model

We start defining a little domain model for our example: we define a contact and a contact book

!!!! Contact
We start by defining a simple contact class.

[[[
Object subclass: #CmContact
	instanceVariableNames: 'name phone'
	classVariableNames: ''
	package: 'Commander2-ContactBook-Model'
]]]

We just define a printOn: method and a couple of accessors.
[[[
CmContact >> printOn: aStream
		super printOn: aStream.
	
		aStream nextPut: $(.
		aStream nextPutAll: name.
		aStream nextPut: $).
]]]


[[[
CmContact >> name
	^ name
]]]

[[[
CmContact >> phone
	^ phone
]]]

[[[
CmContact >> name: aString
	name := aString
]]]

[[[
CmContact >> phone: anObject
	phone := anObject
]]]

!!!! ContactBook
Now we define the contact book class. It is also straighforward. 

[[[
Object subclass: #CmContactBook
	instanceVariableNames: 'contents'
	classVariableNames: ''
	package: 'Commander2-ContactBook-Model'
]]]


[[[
CmContactBook >> initialize
		super initialize.
		contents := OrderedCollection new.
]]]

[[[
CmContactBook >> contents
	^ contents
]]]

[[[
CmContactBook >> contents: anObject
	contents := anObject
]]]



We add the possibility to add and remove a contact

[[[
CmContactBook >> addContact: aContact
	contents add: aContact
]]]


[[[
CmContactBook >> removeContact: aContact
	contents remove: aContact
]]]

[[[
CmContactBook >> addContact: newContact after: contactAfter 
	contents add: newContact after: contactAfter
]]]

We add a simple testing method in case you want to write some tests (which we urge you to do).

[[[
CmContactBook >> 	includesContact: aContact
	^ contents includes: aContact
]]]

And now we can add the most important method

[[[
CmContactBook >> add: contactName phone: phone
	| contact |
	contact := CmContact named: contactName phone: phone.
	self addContact: contact.
	^ contact
]]]

!!! Prefilling up the contact book

Since we want to have some contacts and we way to keep them without resorting 
to a database or file we set some class instance variables. 

We defined two class instance variables: ==family== and ==coworkers== and define
some class method accessors as follows: 

[[[
CmContactBook class >> family
	^family ifNil: [ 
		family := self new 
			add: 'John' phone: '342 345';
			add: 'Bill' phone: '123 678';
			add: 'Marry' phone: '789 567';
			yourself]
]]]

[[[
CmContactBook class >> coworkers
	^coworkers ifNil: [ 
		coworkers := self new 
			add: 'Stef' phone: '112 378';
			add: 'Pavel' phone: '898 678';
			add: 'Marcus' phone: '444 888';
			yourself]
]]]

We add one method to be able to reset them if necessary.

[[[
CmContactBook class >> reset
	<script>
	coworkers := nil.
	family := nil
]]]


!!! A simple UI

Now we define the application we want to get to illustrate Commander. The application UI is shown in Figure *@final*.

+A rudimentary contact book application.>figures/final.png|width=60|label=final+

We define the class ==CmContactBookPresenter==. It holds a reference to a contact book 
and it is structured around a table. 

[[[
ComposablePresenter subclass: #CmContactBookPresenter
	instanceVariableNames: 'table contactBook'
	classVariableNames: ''
	package: 'Commander2-ContactBook-Spec'
]]]

We define an accessor for the contact book and the table.

[[[
CmContactBookPresenter >> contactBook
	^ contactBook
]]]

[[[
CmContactBookPresenter >> table: anObject
	table := anObject
]]]

[[[
CmContactBookPresenter >> table
	^ table
]]]

!!! Initializing the model

We specialize the method ==setModelBeforeInitialization:== that is invoked by the framework to assign the contactBook instance variable to the object passed during the 
execution of the expression ==(CmContactBookPresenter on: CmContactBook coworkers) openWithSpec==.

[[[
CmContactBookPresenter >> setModelBeforeInitialization: aContactBook
	super setModelBeforeInitialization: aContactBook.
	contactBook := aContactBook
]]]


!!!! Layout

[[[
CmContactBookPresenter class >> defaultSpec

	^ SpecLayout composed
		newColumn: [ :column |
			column add: #table];
		yourself
]]]

!!!! Widget initialization

We initialize the table to display two columns for the name and the phone. 
The respective accessors willbe sent to the elements to fill up the columns.
Finally the table contents is set using the contact book contents.
[[[
CmContactBookPresenter class >> initializeWidgets
	table := self newTable.
	table 
		addColumn: (StringTableColumn title: 'Name' evaluated: #name);
		addColumn: (StringTableColumn title: 'Phone' evaluated: #phone).
	table items: contactBook contents.
]]]

Now we can start opening the UI by executing the following snippet
==(CmContactBookPresenter on: CmContactBook coworkers) openWithSpec==

We define a class method to be able to easily reexecute the set up. 
[[[
CmContactBookPresenter class >> coworkersExample
	<example>
	^ (self on: CmContactBook coworkers) openWithSpec 
]]]

You should obtain the following UI as shown in Figure *@first*.

+First version without menus and toolbar.>figures/firstVersion.png|width=60|label=first+


[[[
CmContactBookPresenter >> newContact
	| rawData splitted |
	rawData := self 
		request: 'Enter new contact name and phone (split by comma)' 
		initialAnswer: '' 
		title: 'Create new contact'.
	splitted := rawData splitOn: $,.
	(splitted size = 2 and: [ splitted allSatisfy: #isNotEmpty ])
		ifFalse: [ InvalidUserInput signal: 'Please enter contact name and phone (split by comma)'  ].

	^ CmContact new
		name: splitted first;
		phone: splitted second;
		yourself
]]]

To test it, we can get access to the presenter as follows 
[[[
(CmContactBookPresenter on: CmContactBook coworkers) 
	openWithSpec presenter inspect
]]]

and you can send the ==newContact== message as shown in Figure *@inspector*.

+Playing inside the inspector.>figures/inspector.png|width=60|label=inspector+

We will also defined the methods ==isContactSelected== and ==selectedContact== to know if a contact is currently selected and to return it. It will help us later to add contact just after the currently selected contact.

[[[
CmContactBookPresenter >> isContactSelected
	^ table selection selectedItem notNil
]]]

[[[
CmContactBookPresenter >> selectedContact
	^ table selection selectedItem
]]]

!!! Defining commands
A command is a simple object instance of a subclass of the class ==CmCommand==.
It has a description, a name (this name can be either static or dynamic as we will later on). In addition it has a context from which it extracts information to execute itself. But let us have a look at examples. 

For convenience reasons, we define a common superclass named ==CmContactBookCommand== to all the commands  of the contact book application.

[[[
CmCommand subclass: #CmContactBookCommand
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Commander2-ContactBook-Commands'
]]]



We define a simple helper method to make the code more readable
[[[
CmContactBookCommand >> contactBookPresenter
	^ self context
]]]

For the same reason, we define another helper to access the contact book.
[[[
CmContactBookCommand >> contactBook
	^ self contactBookPresenter contactBook
]]]

[[[
CmContactBookCommand >> selectedContact
	^ self contactBookPresenter selectedContact
]]]

Using such helper methods we defined the method ==hasSelectContract== as follows:

[[[
CmContactBookCommand >> hasSelectedContact
	^ self contactBookPresenter isContactSelected
]]]

!!!! Adding the add contact command

We define a subclass to define the add a contact command. 
[[[
CmContactBookCommand subclass: #CmAddContactCommand
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Commander2-ContactBook-Commands'
]]]

[[[
CmAddContactCommand >> initialize
	super initialize.
	self
		basicName: 'New contact'; 
		basicDescription: 'Creates a new contact and add it to the contact book.'
]]]

[[[
CmAddContactCommand >> execute
	
	| contact |
	contact := self contactBookPresenter newContact.
	self hasSelectedContact
		ifTrue: [ self contactBook addContact: contact after: self selectedContact ]
		ifFalse: [ self contactBook addContact: contact ].
		
	self contactBookPresenter updateView
]]]

We should define the method ==updateView== to refresh the contents of the table.

[[[
CmContactBookPresenter >> updateView
	table items: contactBook contents
]]]

Now in the inspect pane we can simply execute the command as follows:

[[[
(CmAddContactCommand new context: self) execute
]]]

Excuting the command should ask you to give a name and a phone number
and will get added to the list.

!!! Adding the remove contact command

We define now another command to remove a command. 
This example is interesting because it does not involve any UI interaction.
It shows that a command is not necessarily linked to UI interaction.

[[[
CmRemoveContactCommand >> initialize
	super initialize.
	self
		basicName: 'Remove'; 
		basicDescription: 'Removes the selected contact from the contact book.'
]]]

This command definition illustrates how we can control when a command should or not be executed. The method ==canBeRun== allows one to specify such condition.

[[[
CmRemoveContactCommand >> canBeRun
	^ self context isContactSelected
]]]

The method ==execute== is straightforward.
[[[
CmRemoveContactCommand >> execute
	self contactBookPresenter removeContact: self selectedContact.
	self contactBookPresenter updateView
]]]

!!! Turning commands into menu items

In Spec, commands that are transformed into menu items are structured into a tree of command instances. The class method ==buildCommandsGroupWith:forRoot:== is a hook to let the presenter define the root of the command instance tree.

A command is transformed into a command for Spec using the message ==forSpec==.
We will show later that we can add UI specific information to a command such as an icon and a shortcut.

The method ==buildCommandsGroupWith:forRoot:== registers commands to which the presenter instance is passed as context. Note that here we just add plain commands, but 
we can also create groups. This is also in this method that we will specify toolbar.

[[[
CmContactBookPresenter class >> 
	buildCommandsGroupWith: presenter 
	forRoot: rootCommandGroup
	
	rootCommandGroup 
		register: (CmAddContactCommand2 forSpec context: presenter);
		register: (CmRemoveContactCommand2 forSpec context: presenter)
]]]

We have now to attach the root of the command tree to the table. 
This is what what we do with the new line in the ==initializeWidgets== method. 
Notice that we have the full control and as we will show we could select a subpart of the tree (using the message ==/==) and defining as root for given component.


[[[
CmContactBookPresenter >> initializeWidgets
	table := self newTable.
	table 
		addColumn: (StringTableColumn title: 'Name' evaluated: #name);
		addColumn: (StringTableColumn title: 'Phone' evaluated: #phone).
	table contextMenu: [ self rootCommandsGroup beRoot asMenuPresenter ].
	table items: contactBook contents.
]]]

Reopening the interface you should see the menu items as shown in Figure *@withmenu*.
As we will show later we could even replace a menu item by another one, changing its name, or icon in place. 

+With two menu items.>figures/withMenus.png|width=60|label=withmenu+


!!! Introducing groups

Commands can be managed in groups and such groups can be turned into corresponding menu item sections.
Here we give an example of such grouping.  Notice the message ==asSpecGroup== sent to a group.

[[[
CmContactBookPresenter class >> buildAddingGroupWith: presenter
	^ (CmCommandGroup named: 'Adding') asSpecGroup
		basicDescription: 'Commands related to contact addition.';
		register: (CmAddContactCommand forSpec context: presenter);
		beDisplayedAsGroup;
		yourself
]]]

[[[
CmContactBookPresenter class >> buildRemovingGroupWith: presenter
	^ (CmCommandGroup named: 'Removing') asSpecGroup
		basicDescription: 'Commands related to contact removal.';
		register: (CmRemoveContactCommand forSpec context: presenter);
		beDisplayedAsGroup;
		yourself
]]]

[[[
CmContactBookPresenter class >> buildContextualMenuGroupWith: presenter
	^ (CmCommandGroup named: 'Context Menu') asSpecGroup
		register: (self buildAddingGroupWith: presenter);
		register: (self buildRemovingGroupWith: presenter);
		yourself
]]]

Finally we revisit the hook ==buildCommandsGroupWith:forRoot:== to 

[[[
CmContactBookPresenter class >> buildCommandsGroupWith: presenter forRoot: rootCommandGroup
	rootCommandGroup
		register: (self buildContextualMenuGroupWith: presenter)
]]]

To show you that we can also select a part of the command tree we select the 'Context Menu' group and we declare it as the root of the table menu.

[[[
initializeWidgets
	table := self newTable.
	table 
		addColumn: (StringTableColumn title: 'Name' evaluated: #name);
		addColumn: (StringTableColumn title: 'Phone' evaluated: #phone).
	
	table contextMenu: [ (self rootCommandsGroup / 'Context Menu') beRoot asMenuPresenter ].
	table items: contactBook contents.	
]]]	
		
!!! Extending menus

Building menu is nice, but sometimes we need to add a menu into an existing one. Commander supports this as we show it now. 

Imagine that we have a new functionality that we want to add to the contact book and that this behavior is packaged in another package. First we will define a new command
and second we will show how we can extend the existing menu to add a new menu item. 

[[[
CmContactBookCommand subclass: #CmChangePhoneCommand
	instanceVariableNames: 'newPhone'
	classVariableNames: ''
	package: 'Commander2-ContactBook-Extensions'
]]]

[[[
CmChangePhoneCommand >> newPhone: anObject
	newPhone := anObject
]]]

[[[
CmChangePhoneCommand >> newPhone
	^ newPhone 
]]]

[[[
CmChangePhoneCommand >> initialize
	super initialize.
	self
		basicName: 'Change phone';
		basicDescription: 'Change the phone number of the contact.'
]]]

[[[
CmChangePhoneCommand >> execute
	self selectedContact phone: self contactBookPresenter newPhone.
	self contactBookPresenter updateView
]]]

We extend with the method ==newPhone== the presenter to support the definition of the new phone number. 

[[[
CmContactBookPresenter >> newPhone
	| phone |
	phone := self 
		request: 'New phone for the contact'
		initialAnswer: self selectedContact phone 
		title: 'Set new phone for contact'.
	(phone matchesRegex: '\d\d\d\s\d\d\d')
		ifFalse: [ 
			InvalidUserInput signal: 'The phone number is not well formated. 
Should match "\d\d\d\s\d\d\d"' ].
	^ phone
]]]

The last missing piece is the declaration of the extension. This one is done using the pragma ==<extensionCommands>== on the class side of the presenter class as follows:

Here we see that using ==\==, we can select the group in which we want to add the item. 
[[[
CmContactBookPresenter class >> 
	changePhoneCommandWith: presenter 
	forRootGroup: aCmCommandsGroup
	<extensionCommands>
	
	(aCmCommandsGroup / 'Context Menu' / 'Edition')
		register: (CmChangePhoneCommand forSpec context: presenter)
]]]

!!! Reusing generic commands

Commander supports also the reuse and in place customisation of generic commands.
Here is an example that shows that we adapt twice the same command. The context is computed at the moment the command is executed and The name and description can be adapted for its specific usage.

[[[
CmContactBookPresenter class >>	
	extraCommandsWith: presenter 
	forRootGroup: aCmCommandsGroup
	<extensionCommands>
	
	aCmCommandsGroup / 'Context Menu'
		register: 
			((CmCommandGroup named: 'Extra') asSpecGroup
				basicDescription: 'Extra commands to help during development.';
				register: ((CmInspectCommand forSpec context: [ presenter selectedContact ]) 
								basicName: 'Inspect contact';
								basicDescription: 'Open an inspector on the selected contact.';
								yourself);
				register: ((CmInspectCommand forSpec context: [ presenter contactBook ])
								basicName: 'Inspect contact book';
								basicDescription: 'Open an inspector on the contact book.';
								yourself);
		yourself)
]]]

!!! Managing a menu bar

Commander supports also menu bar definition.
The logic is the same than for contextual menus: with define a group and register it.

[[[
CmContactBookPresenter class >> buildMenuBarGroupWith: presenter
	^ (CmCommandGroup named: 'MenuBar') asSpecGroup
		register: (CmPrintContactBookInTranscript forSpec context: presenter);
		yourself
]]]

[[[
CmContactBookPresenter class >> 
	buildCommandsGroupWith: presenter 
	forRoot: rootCommandGroup
	
	rootCommandGroup
		register: (self buildMenuBarGroupWith: presenter);
		register: (self buildContextualMenuGroupWith: presenter)
]]]

And we hook it into the widget as the last line of this following method. Notice the message ==asMenuBarPresenter==.
[[[
CmContactBookPresenter >> initializeWidgets
	table := self newTable.
	table 
		addColumn: (StringTableColumn title: 'Name' evaluated: #name);
		addColumn: (StringTableColumn title: 'Phone' evaluated: #phone).
	table contextMenu: [ (self rootCommandsGroup / 'Context Menu') beRoot asMenuPresenter ].
	table items: contactBook contents.	
	menuBar := (self rootCommandsGroup / 'MenuBar') asMenuBarPresenter.
]]]	