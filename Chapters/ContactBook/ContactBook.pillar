!! A Simple Contact Book 

In this chapter we develop a simple model for a contact book. 
Then we define a user interface.
This example will be used at certain place in the book to show extra concepts such as commands, applications, windows.

Let's start with a sample application: a Contact book.
We start defining a little domain model for our example: we define a contact and a contact book

!!! Contact domain model
We start by defining a simple contact class.

[[[
Object subclass: #EgContact
	instanceVariableNames: 'name phone'
	classVariableNames: ''
	package: 'Eg-ContactBook-Model'
]]]

We just define a printOn: method and a couple of accessors.
[[[
EgContact >> printOn: aStream

		super printOn: aStream.
		aStream nextPut: $(.
		aStream nextPutAll: name.
		aStream nextPut: $).
]]]


[[[
EgContact >> name
	^ name
]]]

[[[
EgContact >> phone
	^ phone
]]]

[[[
EgContact >> name: aString
	name := aString
]]]

[[[
EgContact >> phone: anObject
	phone := anObject
]]]

!!! ContactBook
Now we define the contact book class. It is also straighforward. 

[[[
Object subclass: #EgContactBook
	instanceVariableNames: 'contents'
	classVariableNames: ''
	package: 'Commander2-ContactBook-Model'
]]]


[[[
EgContactBook >> initialize
		super initialize.
		contents := OrderedCollection new.
]]]

[[[
EgContactBook >> contents
	^ contents
]]]

[[[
EgContactBook >> contents: anObject
	contents := anObject
]]]



We add the possibility to add and remove a contact

[[[
EgContactBook >> addContact: aContact
	contents add: aContact
]]]


[[[
EgContactBook >> removeContact: aContact
	contents remove: aContact
]]]

[[[
EgContactBook >> addContact: newContact after: contactAfter 
	contents add: newContact after: contactAfter
]]]

We add a simple testing method in case you want to write some tests (which we urge you to do).

[[[
EgContactBook >> 	includesContact: aContact
	^ contents includes: aContact
]]]

And now we can add the most important method

[[[
EgContactBook >> add: contactName phone: phone
	| contact |
	contact := EgContact named: contactName phone: phone.
	self addContact: contact.
	^ contact
]]]

!!! Prefilling up the contact book

Since we want to have some contacts and we way to keep them without resorting 
to a database or file we set some class instance variables. 

We defined two class instance variables: ==family== and ==coworkers== and define
some class method accessors as follows: 

[[[
EgContactBook class >> family
	^family ifNil: [ 
		family := self new 
			add: 'John' phone: '342 345';
			add: 'Bill' phone: '123 678';
			add: 'Marry' phone: '789 567';
			yourself]
]]]

[[[
EgContactBook class >> coworkers
	^coworkers ifNil: [ 
		coworkers := self new 
			add: 'Stef' phone: '112 378';
			add: 'Pavel' phone: '898 678';
			add: 'Marcus' phone: '444 888';
			yourself]
]]]

We add one method to be able to reset them if necessary.

[[[
EgContactBook class >> reset
	<script>
	coworkers := nil.
	family := nil
]]]


!!! A simple UI

Now we define the application we want to get to illustrate Commander. The application UI is shown in Figure *@final*.

+A rudimentary contact book application.>figures/final.png|width=60|label=final+

We define the class ==EgContactBookPresenter==. It holds a reference to a contact book 
and it is structured around a table. 

[[[
ComposablePresenter subclass: #EgContactBookPresenter
	instanceVariableNames: 'table contactBook'
	classVariableNames: ''
	package: 'Commander2-ContactBook-Spec'
]]]

We define an accessor for the contact book and the table.

[[[
EgContactBookPresenter >> contactBook
	^ contactBook
]]]

[[[
EgContactBookPresenter >> table: anObject
	table := anObject
]]]

[[[
EgContactBookPresenter >> table
	^ table
]]]

!!! Initializing the model

We specialize the method ==setModelBeforeInitialization:== that is invoked by the framework to assign the contactBook instance variable to the object passed during the 
execution of the expression ==(EgContactBookPresenter on: EgContactBook coworkers) openWithSpec==.

[[[
EgContactBookPresenter >> setModelBeforeInitialization: aContactBook
	super setModelBeforeInitialization: aContactBook.
	contactBook := aContactBook
]]]


!!!! Layout

[[[
EgContactBookPresenter class >> defaultSpec

	^ SpecLayout composed
		newColumn: [ :column |
			column add: #table];
		yourself
]]]

!!!! Widget initialization

We initialize the table to display two columns for the name and the phone. 
The respective accessors willbe sent to the elements to fill up the columns.
Finally the table contents is set using the contact book contents.
[[[
EgContactBookPresenter class >> initializeWidgets
	table := self newTable.
	table 
		addColumn: (StringTableColumn title: 'Name' evaluated: #name);
		addColumn: (StringTableColumn title: 'Phone' evaluated: #phone).
	table items: contactBook contents.
]]]

Now we can start opening the UI by executing the following snippet
==(EgContactBookPresenter on: EgContactBook coworkers) openWithSpec==

We define a class method to be able to easily reexecute the set up. 
[[[
EgContactBookPresenter class >> coworkersExample
	<example>
	^ (self on: EgContactBook coworkers) openWithSpec 
]]]

You should obtain the following UI as shown in Figure *@first*.

+First version without menus and toolbar.>figures/firstVersion.png|width=60|label=first+


[[[
EgContactBookPresenter >> newContact
	| rawData splitted |
	rawData := self 
		request: 'Enter new contact name and phone (split by comma)' 
		initialAnswer: '' 
		title: 'Create new contact'.
	splitted := rawData splitOn: $,.
	(splitted size = 2 and: [ splitted allSatisfy: #isNotEmpty ])
		ifFalse: [ InvalidUserInput signal: 'Please enter contact name and phone (split by comma)'  ].

	^ EgContact new
		name: splitted first;
		phone: splitted second;
		yourself
]]]

To test it, we can get access to the presenter as follows 
[[[
(EgContactBookPresenter on: EgContactBook coworkers) 
	openWithSpec presenter inspect
]]]

and you can send the ==newContact== message as shown in Figure *@inspector*.

+Playing inside the inspector.>figures/inspector.png|width=60|label=inspector+

We will also defined the methods ==isContactSelected== and ==selectedContact== to know if a contact is currently selected and to return it. It will help us later to add contact just after the currently selected contact.

[[[
EgContactBookPresenter >> isContactSelected
	^ table selection selectedItem notNil
]]]

[[[
EgContactBookPresenter >> selectedContact
	^ table selection selectedItem
]]]
