SpPresenterWithModel subclass: #ClassVisualizerPresenter    instanceVariableNames: 'tree button morphPresenter codePresenter'    classVariableNames: ''    package: 'Spec2-Testing'!!ClassVisualizerPresenter methodsFor: 'testing support' stamp: 'cd 4/14/2022 16:19'!stringMorphContent    ^ morphPresenter morph contents! !!ClassVisualizerPresenter methodsFor: 'testing support' stamp: 'cd 4/14/2022 16:42'!clickOnColorButton    button click! !!ClassVisualizerPresenter methodsFor: 'testing support' stamp: 'cd 4/14/2022 16:42'!stringMorphColor    ^ morphPresenter morph color! !!ClassVisualizerPresenter methodsFor: 'testing support' stamp: 'cd 4/14/2022 16:37'!selectClass: aClass     tree selectItem: aClass! !!ClassVisualizerPresenter methodsFor: 'testing support' stamp: 'cd 4/14/2022 16:18'!selectPath: aCollection     tree selectPath: aCollection! !!ClassVisualizerPresenter methodsFor: 'testing support' stamp: 'cd 4/14/2022 16:38'!selectedClass    ^ tree selectedItem! !!ClassVisualizerPresenter methodsFor: 'initialization' stamp: 'cd 4/14/2022 16:44'!connectPresenters    tree         whenSelectedItemChangedDo: [ :class |             codePresenter text: class definitionString.            morphPresenter morph: class name asMorph. ];        selectPath: { 1 }.            button action: [ morphPresenter morph color: Color random ]! !!ClassVisualizerPresenter methodsFor: 'initialization' stamp: 'cd 4/14/2022 16:44'!initializePresenter     tree := self newTree        roots: { self model };        children: [ :class | class subclasses ];        display: [ :class | class name ];        displayIcon: [ :class | class systemIcon ];        beSingleSelection;        yourself.    codePresenter := self newCode        beNotEditable;        yourself.    morphPresenter := self newMorph.    button := self newButton         label: 'Random color';        icon: (self iconNamed: #paint);        yourself.! !!ClassVisualizerPresenter methodsFor: 'initialization' stamp: 'cd 4/14/2022 16:50'!initializeWindow: aWindowPresenter    aWindowPresenter        title: 'Class visualizer';        initialExtent: 600@500! !!ClassVisualizerPresenter methodsFor: 'layout' stamp: 'cd 4/14/2022 16:44'!defaultLayout     ^ SpBoxLayout newTopToBottom         add: tree;        add: (SpBoxLayout newLeftToRight             spacing: 5;            add: codePresenter;            add: (SpBoxLayout newTopToBottom                 add: morphPresenter;                add: button expand: false;                yourself);            yourself) ;        yourself! !!ClassVisualizerPresenter methodsFor: 'accessing' stamp: 'cd 4/14/2022 16:45'!codePresenter    ^ codePresenter! !!ClassVisualizerPresenter methodsFor: 'accessing' stamp: 'cd 4/14/2022 16:44'!codeText    ^ codePresenter text! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClassVisualizerPresenter class    instanceVariableNames: ''!!ClassVisualizerPresenter class methodsFor: 'instance creation' stamp: 'cd 4/14/2022 16:49'!open    <script>    (self on: Object) open! !TestCase subclass: #ClassVisualizerPresenterTest    instanceVariableNames: 'presenter'    classVariableNames: ''    package: 'Spec2-Testing'!!ClassVisualizerPresenterTest methodsFor: 'tests' stamp: 'cd 4/14/2022 16:44'!testTextPresenterIsNotEditable    presenter := ClassVisualizerPresenter on: Object.        self deny: presenter codePresenter isEditable! !!ClassVisualizerPresenterTest methodsFor: 'tests' stamp: 'cd 4/14/2022 16:50'!testInitializeWindow    | window |    presenter := ClassVisualizerPresenter on: Object.        [ window := presenter open.        self assert: window isBuilt.    self assert: window title equals: 'Class visualizer'.    self assert: window initialExtent equals: 600 @ 500. ]        ensure: [ window close ]! !!ClassVisualizerPresenterTest methodsFor: 'tests' stamp: 'cd 4/14/2022 16:24'!testInitialization    | model |    model := String.    presenter := ClassVisualizerPresenter on: model.        self assert: presenter model equals: model.    self assert: presenter codeText equals: model definitionString.    self        assert: presenter stringMorphContent        equals: model name! !!ClassVisualizerPresenterTest methodsFor: 'tests' stamp: 'cd 4/14/2022 16:39'!testSelectItemOnTreePresenter    "We have initialized the tree with Object as its roots. The class OrderedCollection is a subclass of Object. We would simulate that a user selects OrderedCollection from the tree presenter."    presenter := ClassVisualizerPresenter on: Object.        presenter selectClass: OrderedCollection.        self        assert: presenter selectedClass        equals: OrderedCollection.    self        assert: presenter codeText        equals: OrderedCollection definitionString.    self        assert: presenter stringMorphContent        equals: OrderedCollection name! !!ClassVisualizerPresenterTest methodsFor: 'tests' stamp: 'cd 4/14/2022 16:43'!testButtonChangesMorph    | previousColor |    presenter := ClassVisualizerPresenter on: Object.    previousColor := presenter stringMorphColor.        presenter clickOnColorButton.        self        deny: presenter stringMorphColor        equals: previousColor! !