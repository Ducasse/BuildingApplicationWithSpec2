!! Most of Spec20 in one Example

In this chapter we will guide you over the building of a simple but not trivial 
application to manage films as shown in Figure *@FullApp*.
We will show many aspects of Spec20 that we will revisit in depth in the rest of this book:
application, presenter, separation between domain and model, layout, transmission to connect widget and styles. 


+Film App: reusing the same component to edit and browsing a film.>file://figures/FullApp.png|width=100|label=FullApp+

!!! Application
Spec20 introduces the concept of an application. An ''application'' is small object responsible to keep the state the your application. It manages for example, the multiple windows that can compose your application, its back-end, and can hold properties shared by the application. 

We start to define an application as follows: 

[[[
SpApplication subclass: #ImdbApp
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

In this example, we will show how we define which back-end to use and this will allow us to switch between Morphic and GTK.

!!! A Basic Model

Since we will manage films we define a ==Film== class as follows: It has a name, a year and a director. We generate the companion accessors.

[[[
Object subclass: #ImdbFilm
	instanceVariableNames: 'name year director'
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

We need to have a way to store and query some films. 
We could use Voyage since it works without an external Mongo DB. 
But we want to keep it extremely simple.
So define a kind of singleton (one of the most misunderstood and ugliest Design Pattern so burn your computer once
you will coded it).

We define a class instance variable called ==films==.

[[[
ImdbFilm class
	instanceVariableNames: 'films'
]]]

We define a method that lazy initialize the ==films== variable to an ordered collection.

[[[
ImdbFilm class >> films

	^ films ifNil: [ films := OrderedCollection new ]
]]]

And to finish we define a way to add a film to the list.

[[[
ImdbFilm class >> addFilm: aFilm
	films add: aFilm
]]]

Now we are ready to define a first presenter that will manage a list of films.

!!!List of Films
We will now define a presenter to manage a list of films.
We define a new class ==ImdbFilmListPresenter== which inherits from ==SpPresenter==.

[[[
SpPresenter subclass: #ImdbFilmListPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

We define how the information should be presented by defining a class method named ==defaultLayout==. 
Here we define a simple layout: a list of boxes displayed vertically.
Inside this box layout, we add a specific presenter for the list itself we name it ==filmList==.

[[[
ImdbFilmListPresenter class >> defaultLayout

	^ SpBoxLayout newVertical
			add: #filmList; 
			yourself
]]]

When you do not define any other methods to represent layout this is the method that is invoked by Spec logic. 
You will see later that in fact (1) a presenter can have multiple layouts, (2) that we can define instance level layouts to get more dynamic situations.


We define how we use the presenter for the filmList.
In fact the list is more table than a mere list so we assign 
[[[
ImdbFilmListPresenter >> initializePresenters

	filmList := self newTable
		addColumn: (SpStringTableColumn title: 'Name' evaluated: #name);
		addColumn: (SpStringTableColumn title: 'Director' evaluated: #director);
		addColumn: (SpStringTableColumn title: 'Year' evaluated: #year);
		yourself.
		
	self updatePresenter
]]]

[[[
ImdbFilmListPresenter >> updatePresenter
	
	filmList items: ImdbFilm films
]]]




[[[
ImdbFilmListPresenter >> initializeWindow: aWindowPresenter

	aWindowPresenter 
		title: 'Mini IMDB';
		initialExtent: 600@400;
		toolBar: (self newToolBar
						addItem: (SpToolBarButton new 
										label: 'Add film' ;
										icon: (self application iconNamed: #smallAdd);
										action: [ self addFilm ];
										yourself);
									yourself)
]]]

[[[
ImdbFilmListPresenter >> addFilm
	"empty for now"
]]]

+Film list presenter.>file://figures/FilmListPresenter.png|width=100|label=FilmListPresenter1+


!!! Film itself

[[[
SpPresenter subclass: #ImdbFilmPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

[[[
ImdbFilmPresenter class >> defaultLayout 
	^ SpGridLayout new 
			add: 'Name' at: 1@1; add: #nameText at: 2@1;
			add: 'Director' at: 1@2; add: #directorText at: 2@2;
			add: 'Year' at: 1@3; add: #yearText at: 2@3;
			yourself
]]]



[[[
ImdbFilmPresenter >> initializePresenters

	nameText := self newTextInput.
	directorText := self newTextInput.
	yearText := self newNumberInput rangeMinimum: 1900 maximum:  Year current year
]]]

[[[
ImdbFilmPresenter >> addFilm
	| dialog windowPresenter |
	dialog := ImdbFilmPresenter newApplication: self application.
	windowPresenter := dialog openDialogWithSpec.
	windowPresenter isOk
		ifFalse: [ ^ self ].
	"how would you do it differently?"
	ImdbFilm
		addFilm:
			(ImdbFilm new
				name: dialog nameText text;
				director: dialog director text;
				year: dialog yearNumber number).
	self updatePresenter
]]]

+Film presenter.>file://figures/FilmPresenter1.png|width=100|label=FilmPresenter1+

[[[
ImdbFilmPresenter class >> defaultSpec
	^ SpGridLayout new
		beRowNotHomogeneous;
		add: 'Name' at: 1 @ 1; add: #nameText at: 2 @ 1;
		add: 'Director' at: 1 @ 2; add: #directorText at: 2 @ 2;
		add: 'Year' at: 1 @ 3; add: #yearNumber at: 2 @ 3;
		yourself
]]]

+Using the non homogenous.>file://figures/FilmPresenter2.png|width=100|label=FilmListPresenter2+



[[[
ImdbFilmPresenter class >> defaultLayout
	^ SpGridLayout new
		beRowNotHomogeneous;
		beColumnNotHomogeneous;
		column:2  withConstraints: #beExpand;
		add: 'Name' at: 1 @ 1; add: #nameText at: 2 @ 1;
		add: 'Director' at: 1 @ 2; add: #directorText at: 2 @ 2;
		add: 'Year' at: 1 @ 3; add: #yearNumber at: 2 @ 3;
		yourself
]]]

[[[
ImdbFilmPresenter >> initializeWindow: aWindowPresenter
	aWindowPresenter
		title: 'Film';
		initialExtent: 400 @ 250
]]]

[[[
ImdbFilmPresenter >> initializeDialogWindow: aDialogPresenter
	aDialogPresenter centered.
	aDialogPresenter 
		addButton: 'Cancel' do: [ :presenter | presenter close ];
		addButton: 'Save' do: [ :presenter | presenter beOk; close ].
]]]

+Better window.>file://figures/FilmPresenter3.png|width=100|label=FilmListPresenter3+


Morphic design left over
[[[
ImdbFilmPresenter >> initializePresenters
	nameText := self newTextInput autoAccept: true.
	directorText := self newTextInput autoAccept: true.
	yearNumber := self newNumberInput 
		autoAccept: true;
		rangeMinimum: 1900 maximum: Year current year;
		yourself
]]]

	
!!! Bring the list and detail

[[[
ImdbFilmListPresenter >> initializePresenters

	filmList := self newTable
		addColumn: (SpStringTableColumn title: 'Name' evaluated: #name);
		addColumn: (SpStringTableColumn title: 'Director' evaluated: #director);
		addColumn: (SpStringTableColumn title: 'Year' evaluated: #year);
		yourself.
		
	detail := self instantiate: ImdbFilmPresenter.
	detail enabled: false.
	
	filmList transmitTo: detail.
	self updatePresenter
]]]

[[[
ImdbFilmListPresenter class >> defaultSpec 
	^ SpBoxLayout newVertical
			add: #filmList; 
			add: #detail;
			yourself
]]]
	
	
	
[[[
ImdbFilmPresenter >> defineInputPorts 

	^ { SpModelPort new }	
]]]


[[[
ImdbFilmPresenter >> setModel: aFilm

	nameText text: aFilm name.
	directorText text: aFilm director.
	yearNumber number: aFilm year.
]]]


Use the same component to show a detail or edit a film.

!!! Adding an image column


!!! How to use a Style ?

[[[
initializePresenters 
	self newLabel 
		label: 'Name'; addStyle: 'header'; yourself.
	nameText := self newTextInput autoAccept: true.	
	directorText := self newTextInput autoAccept: true.
	yearNumber := self newNumberInput autoAccept: true;
		rangeMinimum: 1900 maximum: Year current year;
		yourself
]]]

!!! Using GTK theme and settings


To test if you change using a backend 
[[[
ImdbApp >> initialize
	super initialize.
	self useBackend: #Gtk
]]]



[[[
SpGtkConfiguration subclass: #ImdbConfiguration
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]


[[[
ImdbConfiguration >> configure: anApplication

	self installTheme: 'Sierra-darl'.
	self addCSSProviderFromString: '.header {color: red; font-weight: bold}'
]]]

[[[
ImdbApp >> initialize
	super initialize.
	self useBackend: #Gtk with ImdbConfiguration new
]]]


[[[

GtkSettings default themeName: 'Plane'

]]]



!!! Conclusion


