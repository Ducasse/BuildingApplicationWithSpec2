!! Most of Spec20 in one Example

In this chapter we will guide you over the building of a simple but not trivial 
application to manage films as shown in Figure *@FullApp*.
We will show many aspects of Spec20 that we will revisit in depth in the rest of this book:
application, presenter, separation between domain and model, layout, transmission to connect widget and styles. 


+Film App: reusing the same component to edit and browsing a film.>file://figures/FullApp.png|width=100|label=FullApp+

!!! Application
Spec20 introduces the concept of an application. An ''application'' is small object responsible to keep the state the your application. It manages for example, the multiple windows that can compose your application, its back-end, and can hold properties shared by the application. 

We start to define an application as follows: 

[[[language=Smalltalk
SpApplication subclass: #ImdbApp
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

In this example, we will show how we define which back-end to use and this will allow us to switch between Morphic and GTK.

!!! A Basic Model

Since we will manage films we define a ==Film== class as follows: It has a name, a year and a director. We generate the companion accessors.

[[[language=Smalltalk
Object subclass: #ImdbFilm
	instanceVariableNames: 'name year director'
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

We need to have a way to store and query some films. 
We could use Voyage since it works without an external Mongo DB. 
But we want to keep it extremely simple.
So define a kind of singleton (one of the most misunderstood and ugliest Design Pattern so burn your computer once
you will coded it).

We define a class instance variable called ==films==.

[[[language=Smalltalk
ImdbFilm class
	instanceVariableNames: 'films'
]]]

We define a method that lazy initialize the ==films== variable to an ordered collection.

[[[language=Smalltalk
ImdbFilm class >> films

	^ films ifNil: [ films := OrderedCollection new ]
]]]

And to finish we define a way to add a film to the list.

[[[language=Smalltalk
ImdbFilm class >> addFilm: aFilm
	films add: aFilm
]]]

Now we are ready to define a first presenter that will manage a list of films.

!!!List of Films
We define a presenter to manage a list of films.
For this we define a new class named ==ImdbFilmListPresenter== which inherits from ==SpPresenter==.
We add an instance variable named ==filList== that will hold an elementary list presenter. 

[[[language=Smalltalk
SpPresenter subclass: #ImdbFilmListPresenter
	instanceVariableNames: 'filmList'
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

We define how the information should be presented by defining a class method named ==defaultLayout==. 
Here we define a simple layout: a list of boxes displayed vertically.
Inside this box layout, we add a specific presenter for the list itself we name it ==filmList==.

!!!! defaultLayout
[[[language=Smalltalk
ImdbFilmListPresenter class >> defaultLayout

	^ SpBoxLayout newVertical
			add: #filmList; 
			yourself
]]]

When you do not define any other methods to represent layout this is the method that is invoked by Spec logic. 
You will see later that in fact (1) a presenter can have multiple layouts, (2) that we can define instance level layouts to get more dynamic situations.

!!!! initializePresenters
So far we did not explain what ==filmList== was. 
In fact ==filmList== a variable is another elementary presenter (here already existing in Spec20).
We define how we set the presenter for the ==filmList==.
Here the message ==newTable== instantiate a ==SpTablePresenter==.

In fact the list is more table than a mere list: we describe that we want three columns as follows: 

[[[language=Smalltalk
ImdbFilmListPresenter >> initializePresenters

	filmList := self newTable
		addColumn: (SpStringTableColumn title: 'Name' evaluated: #name);
		addColumn: (SpStringTableColumn title: 'Director' evaluated: #director);
		addColumn: (SpStringTableColumn title: 'Year' evaluated: #year);
		yourself.
		
	self updatePresenter
]]]

The last message ==updatePresenter== just query the domain (==ImdbFilm==) to get the list of the recorded films
and populate the internal table with them.

[[[language=Smalltalk
ImdbFilmListPresenter >> updatePresenter
	
	filmList items: ImdbFilm films
]]]

The following expression creates an instance of the film list presenter and open it. You get the widget shown in Figure *@LayoutInitilalizePresenters*.

%ImdbFilmListPresenter0 new openWithSpec
[[[language=Smalltalk
ImdbFilmListPresenter new openWithSpec
]]]

+A layout and initializePresenters.>file://figures/FilmList-01-LayoutInitilalizePresenters.png|width=60|label=LayoutInitilalizePresenters+

!!! Opening presenters 

While directly accessing a presenter to create is possible during development,
a more canonical way to create a presenter is to ask the application using the message ==newPresenter:== as follows.

[[[language=Smalltalk
| app |
app := ImbdApplication new. 
(app newPresenter: ImdbFilmListPresenter) openWithSpec.
]]]

The application is responsible for managing windows and other information, therefore it is important to use it to create presenters that compose the application. 




!!! Improving window
A presenter can be embedded in another presenter as we will show later. It can be also placed within a window and this is what the message ==openWithSpec== is doing. 
Spec offers another hook to specialize the information presented when a presenter is displayed within a window. 

The method ==initializeWindow:== defines a title, a default size (message ==initialExtent==) and a toolbar. You should obtain the window with a tool bar as shown in Figure *@FilmListPresenter2*.
 

[[[language=Smalltalk
ImdbFilmListPresenter >> initializeWindow: aWindowPresenter

	aWindowPresenter 
		title: 'Mini IMDB';
		initialExtent: 600@400;
		toolBar: (self newToolBar
						addItem: (self newToolBarButton 
										label: 'Add film' ;
										icon: (self application iconNamed: #smallAdd);
										action: [ self addFilm ];
										yourself);
									yourself)
]]]

To make sure that the button does not raise an error we define an empty ==addFilm==.
In fact we will define a different presenter to be able to define a film. 

[[[language=Smalltalk
ImdbFilmListPresenter >> addFilm
	"empty for now"
]]]

As we will see with the Commander2 chapter, toolbars can be automatically created out of commands.

We could have added the toolbar in a similar way than the ==filmList== as part of the ==ImdbFilmListPresenter== because the toolbar is also a presenter (similar to the table presenter or other predefined presenters). But doing this way is less modular.
Note also that the toolbar we created could be factored in a separate class to increase reuse too.


+Film list presenter.>file://figures/FilmList-02-initalizeWindows.png|width=60|label=FilmListPresenter2+


!!! An application manages icons

What we can see from the definition of the method ==initializeWindow:== is that an application manages also icons via the message ==iconNamed:==. 
It means that your application can use its own icon set using the method ==iconManager:==. 


!!! Film itself

We are ready to define a simple presenter to edit a film. We will use it to add new film or simply display it.
We create a new subclass of ==SpPresenter== named ==ImdbFilmPresenter==.
This class has three instance variables: ==nameText==, ==directorText==, and ==yearNumber==.

[[[language=Smalltalk
SpPresenter subclass: #ImdbFilmPresenter
	instanceVariableNames: 'nameText directorText yearNumber'
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]



As we did previously, we define a default layout. 
This time we just use a grid layout. With a simple grid layout you can define the position in the grid where your elements will appear. 

[[[language=Smalltalk
ImdbFilmPresenter class >> defaultLayout 
	^ SpGridLayout new 
			add: 'Name' at: 1@1; add: #nameText at: 2@1;
			add: 'Director' at: 1@2; add: #directorText at: 2@2;
			add: 'Year' at: 1@3; add: #yearNumber at: 2@3;
			yourself
]]]

Note that it is not required to create the accessors for the presenter elements as we were forced to do it in Spec1.0.
Here we create them because we will need to access to them when creating the corresponding ==ImbdFilm== instance.


And similarly as before, we define the method ==initializePresenters== to initialize the variables to the corresponding elementary presenters. 
Here the ==nameText== and ==directorTest== are initialized to a textInput, and ==yearNumber== is a numberInput

[[[language=Smalltalk
ImdbFilmPresenter >> initializePresenters

	nameText := self newTextInput.
	directorText := self newTextInput.
	yearNumber := self newNumberInput 
				rangeMinimum: 1900 
				maximum:  Year current year
]]]

[[[language=Smalltalk
| app |
app := ImbdApplication new. 
(app newPresenter: ImdbFilmPresenter) openWithSpec.
]]]

%ImdbFilmPresenter0
+Single Film presenter.>file://figures/FilmList-03-OpenFilmPresenter.png|width=60|label=FilmPresenter1+





[[[language=Smalltalk
ImdbFilmPresenter class >> defaultLayout
	^ SpGridLayout new
		beRowNotHomogeneous;
		beColumnNotHomogeneous;
		column:2  withConstraints: #beExpand;
		add: 'Name' at: 1 @ 1; add: #nameText at: 2 @ 1;
		add: 'Director' at: 1 @ 2; add: #directorText at: 2 @ 2;
		add: 'Year' at: 1 @ 3; add: #yearNumber at: 2 @ 3;
		yourself
]]]

%ImdbFilmPresenter1
+Using the non homogenous.>file://figures/FilmList-04-OpenFilmPresenter-2.png|width=60|label=FilmListPresenter2+

[[[language=Smalltalk
ImdbFilmPresenter >> initializeWindow: aWindowPresenter
	aWindowPresenter
		title: 'Film';
		initialExtent: 400 @ 250
]]]


!!! Invoking a presenter. 

We can define the method ==addFilm== in the class ==ImdbFilmListPresenter==. 
When the user clicks on the button, we create a new film presenter that we associate with the current application. 
We open such presenter as a modal dialog. 
When the user press the Ok button (that we have customized in Figure *@FilmListPresenter3*), we add a new film
to our little database and we update the list as shown in Figure *@refreshed*.

[[[language=Smalltalk
ImdbFilmListPresenter >> addFilm
	| dialog windowPresenter |
	dialog := ImdbFilmPresenter newApplication: self application.
	windowPresenter := dialog openModalWithSpec.
	windowPresenter isOk
		ifFalse: [ ^ self ].
	ImdbFilm
		addFilm:
			(ImdbFilm new
				name: dialog nameText text;
				director: dialog director text;
				year: dialog yearNumber number).
	self updatePresenter
]]]




!!! Better looking Film Presenter
We improve the look of the the film presenter by adding the following new ==initializeWindow:== method (See Figure *@FilmListPresenter3*).

[[[language=Smalltalk
ImdbFilmPresenter >> initializeWindow: aWindowPresenter
	aWindowPresenter
		title: 'Film';
		initialExtent: 400 @ 250
]]]

+Better window.>file://figures/FilmPresenter3.png|width=60|label=FilmListPresenter3+

!!! Customizing the modal dialog


[[[language=Smalltalk
ImdbFilmPresenter >> initializeDialogWindow: aDialogPresenter
	aDialogPresenter centered.
	aDialogPresenter 
		addButton: 'Cancel' do: [ :presenter | presenter close ];
		addButton: 'Save Film' do: [ :presenter | presenter beOk; close ].
]]]

@@note how do I get a button that does not suck and cut half the text (because I tried with Save Film in DB)? I do not think that addButton:do: is a good API because we cannot customize anything. 

%ImdbFilmListPresenter1 new openWithSpec
+Customizing the modal dialog.>file://figures/FilmList-05-Modal.png|width=100|label=FilmListPresenter3+

%ImdbFilmListPresenter1 new openWithSpec
+Film list gets refreshed.>file://figures/FilmList-06-ListRefreshed.png|width=60|label=refreshed+




!!! Embedding the Film presenter into the film list



[[[language=Smalltalk
ImdbFilmListPresenter >> initializePresenters

	filmList := self newTable
		addColumn: (SpStringTableColumn title: 'Name' evaluated: #name);
		addColumn: (SpStringTableColumn title: 'Director' evaluated: #director);
		addColumn: (SpStringTableColumn title: 'Year' evaluated: #year);
		yourself.
		
	detail := self instantiate: ImdbFilmPresenter.
	detail enabled: false.
	
	"HERE something is missing"
	"when bla to do blat"
	self updatePresenter
]]]

+Embedding the film description in the list.>file://figures/MissingFIle.png|width=100|label=FilmListPresenter3+

!!! Tests

A strong aspect of Spec is the fact that we can write test about the interaction. 
So let us take this opportunity to show you that writing tests for UI is not complex. 





!!! Changing layout 

Imagine that we prefer to have the list below the film details. 
We can do it just proposing an alternate layout.






	
!!! Using transmission

Spec20 introduces a nice concept to propagate selection...


[[[language=Smalltalk
ImdbFilmListPresenter >> initializePresenters

	filmList := self newTable
		addColumn: (SpStringTableColumn title: 'Name' evaluated: #name);
		addColumn: (SpStringTableColumn title: 'Director' evaluated: #director);
		addColumn: (SpStringTableColumn title: 'Year' evaluated: #year);
		yourself.
		
	detail := self instantiate: ImdbFilmPresenter.
	detail enabled: false.
	
	filmList transmitTo: detail.
	self updatePresenter
]]]

[[[language=Smalltalk
ImdbFilmListPresenter class >> defaultLayout 
	^ SpBoxLayout newVertical
			add: #filmList; 
			add: #detail;
			yourself
]]]
	
	
	
[[[language=Smalltalk
ImdbFilmPresenter >> defaultInputPort

	^ self inputLabelPort
]]]

[[[language=Smalltalk
ImdbFilmPresenter >> inputLabelPort

	^ no idea what to write here. 
]]]


[[[language=Smalltalk
ImdbFilmPresenter >> setModel: aFilm

	nameText text: aFilm name.
	directorText text: aFilm director.
	yearNumber number: aFilm year.
]]]


Use the same component to show a detail or edit a film.

!!! Styling the application

"I have no idea how it works"

[[[language=Smalltalk
initializePresenters 
	self newLabel 
		label: 'Name'; addStyle: 'header'; yourself.
	nameText := self newTextInput autoAccept: true.	
	directorText := self newTextInput autoAccept: true.
	yearNumber := self newNumberInput autoAccept: true;
		rangeMinimum: 1900 maximum: Year current year;
		yourself
]]]


+Embedding the film description in the list.>file://figures/MissingFIle.png|width=100|label=FilmListPresenter3+

!!! Using GTK theme and settings


To test if you change using a backend 
[[[language=Smalltalk
ImdbApp >> initialize
	super initialize.
	self useBackend: #Gtk
]]]



[[[language=Smalltalk
SpGtkConfiguration subclass: #ImdbConfiguration
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]


[[[language=Smalltalk
ImdbConfiguration >> configure: anApplication

	self installTheme: 'Sierra-darl'.
	self addCSSProviderFromString: '.header {color: red; font-weight: bold}'
]]]

[[[language=Smalltalk
ImdbApp >> initialize
	super initialize.
	self useBackend: #Gtk with ImdbConfiguration new
]]]


[[[language=Smalltalk

GtkSettings default themeName: 'Plane'

]]]

+Embedding the film description in the list.>file://figures/MissingFIle.png|width=100|label=FilmListPresenter3+

!!! Conclusion

We saw...
